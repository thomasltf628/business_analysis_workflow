# Configuration for all tasks in the workflow.
# The {context} and {feedback} placeholders will be filled in dynamically.

parse_requirement:
  description: |
    Analyze the following raw business requirement text and break it down into a structured list of key features, goals, and constraints.
    Focus on extracting clear, actionable items.

    Raw Requirement:
    ---
    {context}
    ---
    {feedback_section}
  expected_output: "A structured markdown document outlining the core components of the requirement."
  agent: "requirement_parser"

generate_stories:
  description: |
    Using the structured requirements below, create a set of user stories. Each story must follow the standard format: "As a [type of user], I want [an action], so that [a benefit]."

    Structured Requirement:
    ---
    {context}
    ---
    {feedback_section}
  expected_output: "A JSON object containing a list of user stories."
  agent: "user_story_generator"

add_acceptance_criteria:
  description: |
    For each user story provided below, write detailed and testable acceptance criteria. Use the "Given-When-Then" format for each criterion to ensure clarity.

    User Stories:
    ---
    {context}
    ---
    {feedback_section}
  expected_output: "The original JSON of user stories, with a new key 'acceptance_criteria' added to each story object, containing a list of criteria strings."
  agent: "acceptance_criteria_generator"

classify_stories:
  description: |
    Review the user stories and their acceptance criteria below. Classify each user story as either 'Functional' or 'Non-Functional'.

    Stories with Criteria:
    ---
    {context}
    ---
    {feedback_section}
  expected_output: "The original JSON of user stories, with a new key 'classification' added to each story object, with the value being either 'Functional' or 'Non-Functional'."
  agent: "requirement_classifier"

validate_artifacts:
  description: |
    Thoroughly review the complete set of generated artifacts below for quality, completeness, and consistency.
    Check for:
    1.  Clarity: Are the stories and criteria easy to understand?
    2.  Consistency: Do the artifacts align with each other and the original goal?
    3.  Completeness: Are there any obvious gaps or missing details?
    4.  Correctness: Is the format of stories and criteria correct? Is the classification accurate?

    If everything is perfect, respond with a JSON object with a 'status' of 'APPROVED'.
    If there are issues, respond with a JSON object with a 'status' of 'REVISION_NEEDED' and provide clear, specific 'feedback' on what needs to be fixed and which role is responsible (e.g., 'The user story about payments is unclear' or 'The acceptance criteria for login is missing an edge case').

    Artifacts to Validate:
    ---
    {context}
    ---
  expected_output: "A single JSON object with a 'status' key ('APPROVED' or 'REVISION_NEEDED') and an optional 'feedback' key."
  agent: "validator_and_refiner"

format_final_output:
  description: |
    Consolidate the approved and finalized artifacts below into a single, clean JSON string. The output should be a list of user story objects, where each object contains the story, its acceptance criteria, and its classification. Ensure the JSON is well-formatted.

    Final Artifacts:
    ---
    {context}
    ---
  expected_output: "A single, clean JSON string representing the list of finalized user story objects."
  agent: "output_formatter"
